# Importing Libraries 

import numpy as np
import random as rn 
import matplotlib.pyplot as plt
import time

#%%
z = "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450"
#%%
nrow = 10
ncol = 10
R = np.zeros((nrow,ncol))
S = np.zeros((nrow,ncol))
T = np.zeros((nrow,ncol))
#%%

X = []
L = []
for i in range(9999999,10000009,1000000):
    random_num = rn.randint(10**i,10**(i+1))
    x = str(random_num)
    L.append(x)
    N = len(x)
    X.append(N)
    
#%%
# Iteration Method
def largest_product(n,num):
    ar = [int(i) for i in num]
    arr = np.asarray(ar,dtype=float)
    previous_product = np.prod(arr[0:n])
    max_product = previous_product 
    j = n
    while j < len(arr):
        if arr[j] == 0:
            if j+n+1 > len(arr):
                break
            previous_product = np.prod(arr[j+1:j+n+1])
            if previous_product == 0:
                k = np.where(arr[j+1:j+n+1] == 0)[0][-1]
                j += k+1
            else:
                j += n+1
        else:
            if arr[j-n] != 0:
                previous_product = (previous_product//arr[j-n])* arr[j]
            else:
                previous_product = previous_product*arr[j]
            j += 1
        if previous_product > max_product:
            max_product = previous_product      
    return max_product
#%%
%%time
for i in range(ncol):
    p = L[i]
    for m in range(100):
        start = time.time_ns()
        largest_product(13,p)
        end = time.time_ns()
        R[m,i] = end-start
average1 = R.mean(axis=0)
sigma1 = np.std(R,axis=0)
#%%
# Vector Method
def highest_product(n,num):
    N = len(num)
    a = [int(i) for i in num]
    A = np.asarray(a)
    B = np.ones(N-n+1)
    for j in range(n):
        B *= A[j:j+N-n+1]
    ans = np.max(B)
    return ans
#%%
%%time
for i in range(ncol):
    p = L[i]
    for m in range(100):
        start = time.time_ns()
        highest_product(13,p)
        end = time.time_ns()
        S[m,i] = end-start
average2 = S.mean(axis=0)
sigma2 = np.std(S,axis=0)
#%%
# Mixed Approach
def adjacent_digits_product(n,num):
    if len(num) <= 500000:
      N = len(num)
      a = [int(i) for i in num]
      A = np.asarray(a)
      B = np.ones(N-n+1)
      for j in range(n):
        B *= A[j:j+N-n+1]
      ans = np.max(B)
      return ans
    else:
      chunk_size = 24  
      L1 = [num[i:i+chunk_size] for i in range(0,len(num),chunk_size)]
      # print('L1 :',L1)
      # print('size 0f L1 :',len(L1))
      row = chunk_size
      col = (len(L1)*2)-1
      # print('col :',col)
      vrow = 0
      vcol = 0
      V = np.zeros((row,col),dtype=int)
      for chunk in L1:
          for element in chunk:
              # print('element :',element)
              V[vrow,vcol] = element
              vrow += 1
              # print('vrow :',vrow)
          vcol += 1
        # print('vcol :',vcol)
          vrow = 0
      # print('V =',V)    
      for current_index in range(len(L1)):
          next_index = current_index+1
          if next_index < len(L1):
              current_chunk = L1[current_index]
              current_chunk_length = len(current_chunk)
              limit = current_chunk_length-n+1
              for i in range(limit,current_chunk_length):
                  V[vrow,vcol] = current_chunk[i]
                  vrow += 1
              next_chunk = L1[next_index]
              for i in range(n-1):
                if(i < len(next_chunk)):  
                  V[vrow,vcol] = next_chunk[i] 
                  vrow += 1
              vrow = 0
              vcol += 1    
      ans = 0
      for col_index in range(col):
          p = V[:chunk_size,col_index] 
          if len(p) > n:
             B = np.ones(len(p)-n+1)
             for i in range(n):
                 B *= p[i:i+len(p)-n+1]
             current_max = np.max(B)
             if current_max > ans:
                 ans = current_max
      return ans    
  
#%%
%%time
for i in range(ncol):
    p = L[i]
    for m in range(100):
        start = time.time_ns()
        adjacent_digits_product(13,p)
        end = time.time_ns()
        T[m,i] = end-start
average3 = T.mean(axis=0)
sigma3 = np.std(T,axis=0)
#%%
plt.figure(figsize=(8,5),dpi=80)
plt.plot(X, average2,'g.', label = "vector")
plt.errorbar(X, average2,yerr=sigma2)
plt.plot(X, average3,'k.', label = "mixed")
plt.errorbar(X, average3,yerr=sigma3)
plt.xlim(100000,1000000)
plt.xticks(np.linspace(0,1100000,12))
plt.xlabel("Number of digits")
plt.ylabel("Time (ns)")
plt.legend()
plt.show()
#%%
plt.figure(figsize=(8,5), dpi=80)
plt.plot(X, average1, 'r.', label = "Iteration")
plt.errorbar(X, average1, yerr=sigma1)
plt.plot(X, average2, 'b.', label = "Vector")
plt.errorbar(X, average2, yerr=sigma2)
plt.plot(X, average3, 'k.', label = "Mixed")
plt.errorbar(X, average3, yerr=sigma3)
plt.xlim(1000000,2100000)
plt.xticks(np.linspace(1000000,2100000,12))
plt.xlabel("Number of digits")
plt.ylabel("Time (ns)")
plt.legend(loc='best')
plt.show()